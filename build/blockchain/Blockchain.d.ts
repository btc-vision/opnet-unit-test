import { Address } from '@btc-vision/bsi-binary';
import { Logger } from '@btc-vision/logger';
import { ContractManager } from '@btc-vision/op-vm';
import { Network } from 'bitcoinjs-lib';
import { ContractRuntime } from '../opnet/modules/ContractRuntime.js';
import { RustContractBinding } from '../opnet/vm/RustContractBinding.js';
declare class BlockchainBase extends Logger {
    readonly network: Network;
    readonly logColor: string;
    readonly DEAD_ADDRESS: Address;
    traceGas: boolean;
    tracePointers: boolean;
    traceCalls: boolean;
    traceDeployments: boolean;
    private readonly enableDebug;
    private readonly contracts;
    private readonly bindings;
    constructor(network: Network);
    createManager(): void;
    removeBinding(id: bigint): void;
    registerBinding(binding: RustContractBinding): void;
    private loadJsFunction;
    private storeJSFunction;
    private callJSFunction;
    private deployContractAtAddressJSFunction;
    private logJSFunction;
    private _contractManager?;
    get contractManager(): ContractManager;
    private _blockNumber;
    get blockNumber(): bigint;
    set blockNumber(blockNumber: bigint);
    private _msgSender;
    get msgSender(): Address;
    set msgSender(sender: Address);
    private _txOrigin;
    get txOrigin(): Address;
    set txOrigin(from: Address);
    generateRandomSegwitAddress(): Address;
    generateRandomTaprootAddress(): Address;
    register(contract: ContractRuntime): void;
    clearContracts(): void;
    generateAddress(deployer: Address, salt: Buffer, from: Address): {
        contractAddress: Address;
        virtualAddress: Buffer;
    };
    convertToBech32(contractVirtualAddress: Address): Address;
    getContract(address: Address): ContractRuntime;
    backup(): void;
    restore(): void;
    dispose(): void;
    cleanup(): void;
    init(): Promise<void>;
    expandTo18Decimals(n: number): bigint;
    expandToDecimal(n: number, decimals: number): bigint;
    decodeFrom18Decimals(n: bigint): number;
    decodeFromDecimal(n: bigint, decimals: number): number;
    mineBlock(): void;
    enableGasTracking(): void;
    disableGasTracking(): void;
    enablePointerTracking(): void;
    disablePointerTracking(): void;
    enableCallTracking(): void;
    disableCallTracking(): void;
    encodePrice(reserve0: bigint, reserve1: bigint): [bigint, bigint];
    private getRandomBytes;
}
export declare const Blockchain: BlockchainBase;
export {};
