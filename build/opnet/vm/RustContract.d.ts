import { BitcoinNetworkRequest, ContractManager } from '@btc-vision/op-vm';
import { Address } from '@btc-vision/bsi-binary';
import { RustContractBinding } from './RustContractBinding.js';
export interface ContractParameters extends Omit<RustContractBinding, 'id'> {
    readonly address: Address;
    readonly bytecode: Buffer;
    readonly gasLimit: bigint;
    readonly network: BitcoinNetworkRequest;
    readonly gasCallback: (gas: bigint, method: string) => void;
    readonly contractManager: ContractManager;
}
export declare class RustContract {
    private refCounts;
    private readonly enableDebug;
    private readonly enableDisposeLog;
    private gasUsed;
    private readonly contractManager;
    constructor(params: ContractParameters);
    private _id?;
    get id(): bigint;
    private _instantiated;
    get instantiated(): boolean;
    private _disposed;
    get disposed(): boolean;
    private _params?;
    private get params();
    dispose(): void;
    defineSelectors(): Promise<void>;
    readMethod(method: number, buffer: Uint8Array | Buffer): Promise<Uint8Array>;
    readView(method: number): Promise<Uint8Array>;
    getEvents(): Promise<Uint8Array>;
    getMethodABI(): Promise<Uint8Array>;
    setEnvironment(buffer: Uint8Array | Buffer): Promise<void>;
    setUsedGas(gas: bigint): void;
    getUsedGas(): bigint;
    useGas(amount: bigint): void;
    getRemainingGas(): bigint;
    setRemainingGas(gas: bigint): void;
    private __retain;
    private __release;
    private __liftString;
    private __liftTypedArray;
    private __lowerTypedArray;
    private gasCallback;
    private getError;
    private abort;
    private __pin;
    private __unpin;
    private __new;
}
