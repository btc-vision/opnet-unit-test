import { ABICoder, Address, NetEvent } from '@btc-vision/bsi-binary';
import { Logger } from '@btc-vision/logger';
import { RustContract } from '../vm/RustContract.js';
export interface CallResponse {
    response?: Uint8Array;
    error?: Error;
    events: NetEvent[];
    callStack: Address[];
    usedGas: bigint;
}
export declare class ContractRuntime extends Logger {
    address: Address;
    readonly deployer: Address;
    protected readonly gasLimit: bigint;
    private readonly potentialBytecode?;
    readonly logColor: string;
    gasUsed: bigint;
    protected states: Map<bigint, bigint>;
    protected shouldPreserveState: boolean;
    protected events: NetEvent[];
    protected readonly deployedContracts: Map<string, Buffer>;
    protected readonly abiCoder: ABICoder;
    private callStack;
    private statesBackup;
    private network;
    protected constructor(address: Address, deployer: Address, gasLimit?: bigint, potentialBytecode?: Buffer | undefined);
    _contract: RustContract | undefined;
    get contract(): RustContract;
    protected _bytecode: Buffer | undefined;
    protected get bytecode(): Buffer;
    preserveState(): void;
    getStates(): Map<bigint, bigint>;
    delete(): void;
    resetStates(): Promise<void> | void;
    setEnvironment(msgSender?: Address, txOrigin?: Address, currentBlock?: bigint, owner?: Address, address?: Address): Promise<void>;
    getEvents(): Promise<NetEvent[]>;
    backupStates(): void;
    restoreStates(): void;
    onCall(data: Buffer | Uint8Array, sender: Address, from: Address): Promise<CallResponse>;
    dispose(): void;
    init(): Promise<void>;
    protected readMethod(selector: number, calldata: Buffer, sender?: Address, txOrigin?: Address): Promise<CallResponse>;
    protected readView(selector: number, sender?: Address, txOrigin?: Address): Promise<CallResponse>;
    protected handleError(error: Error): Error;
    protected defineRequiredBytecodes(): void;
    protected loadContract(): Promise<void>;
    private hasModifiedStates;
    private deployContractAtAddress;
    private load;
    private store;
    private checkReentrancy;
    private call;
    private onLog;
    private getNetwork;
    private generateParams;
    private onGas;
}
